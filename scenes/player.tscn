[gd_scene load_steps=8 format=3 uid="uid://demep833r44w5"]

[ext_resource type="Texture2D" uid="uid://bi5nluf0uq6r1" path="res://assets/Untitled Design Presentation (1).png" id="1_3vyb7"]

[sub_resource type="GDScript" id="GDScript_3vyb7"]
script/source = "extends CharacterBody2D

# --- Constants ---
const GRAVITY: float = 800.0
const MAX_HOLD_TIME: float = 1.0
const MIN_SLIME: float = 0.05
const MAX_SLIME: float = 0.25
const BASE_SPEED: float = 750.0
const MIN_JUMP_HEIGHT: float = -175.0
const MAX_JUMP_HEIGHT: float = -525.0
const MASS_LOSS_RATE: float = 0.1
const WALL_SLIDE_SPEED: float = 50.0
const WALL_JUMP_HORIZONTAL_MULT: float = 5.0
const WALL_JUMP_GRACE: float = 0.1

\\
# --- Exported ---
@export var slime_size: float = 0.25
@export var purple_scene: PackedScene

# --- Variables ---
var current_size: float = slime_size
var is_charging: bool = false
var hold_time: float = 0.0
var jump_velocity: float = 0.0
var _orig_extents: Vector2 = Vector2.ZERO
var is_sticking: bool = false
var last_wall_normal: Vector2 = Vector2.ZERO
var wall_jump_timer: float = 0.0

# --- Node References ---
@onready var sprite: AnimatedSprite2D = $AnimatedSprite2D
@onready var collision: CollisionShape2D = $CollisionShape2D

# --- Functions ---
func _update_collision() -> void:
	if collision.shape is RectangleShape2D:
		collision.shape.extents = _orig_extents * current_size

func _ready() -> void:
	current_size = slime_size
	sprite.scale = Vector2.ONE * current_size
	if collision.shape is RectangleShape2D:
		_orig_extents = collision.shape.extents
	_update_collision()

func _physics_process(delta: float) -> void:
	var dir = Input.get_axis(\"ui_left\", \"ui_right\")
	velocity.x = dir * BASE_SPEED * current_size
	if velocity.x != 0:
		sprite.flip_h = velocity.x < 0

	# Reduce wall jump grace timer
	if wall_jump_timer > 0.0:
		wall_jump_timer -= delta

	# Gravity
	if not is_on_floor() and wall_jump_timer <= 0:
		if is_sticking:
			velocity.y = WALL_SLIDE_SPEED
		else:
			velocity.y += GRAVITY * delta
	elif is_on_floor():
		velocity.y = 0

	var wall_normal = get_wall_normal()
	# Only stick for sliding if on wall and not recently jumped
	if is_on_wall() and not is_on_floor() and wall_normal != last_wall_normal and wall_jump_timer <= 0:
		is_sticking = true
	else:
		is_sticking = false

	# Reset last wall when touching floor
	if is_on_floor():
		last_wall_normal = Vector2.ZERO

	# Apply queued jump
	if jump_velocity != 0:
		velocity.y = jump_velocity
		jump_velocity = 0

	move_and_slide()

func _process(delta: float) -> void:
	# Start charging jump
	if Input.is_action_just_pressed(\"ui_up\") and (is_on_floor() or is_sticking):
		is_charging = true
		hold_time = 0.0

	if is_charging:
		hold_time += delta
		var frac = clamp(hold_time / MAX_HOLD_TIME, 0.0, 1.0)
		sprite.scale = Vector2(current_size * (1.0 - 0.1 * frac), current_size)
		_update_collision()

	# Release jump
	if Input.is_action_just_released(\"ui_up\") and is_charging:
		is_charging = false
		var charge_frac = clamp(hold_time / MAX_HOLD_TIME, 0.0, 1.0)

		# Shrink proportional to MASS_LOSS_RATE
		var shrink_amount = current_size * MASS_LOSS_RATE * charge_frac
		current_size = max(current_size - shrink_amount, MIN_SLIME)
		slime_size = current_size
		sprite.scale = Vector2.ONE * current_size
		_update_collision()

		if purple_scene != null and shrink_amount > 0.01:
			var purple = purple_scene.instantiate()
			purple.name = \"PurpleSlime_%d\" % randi()
			get_tree().current_scene.add_child(purple)
			if purple.has_method(\"spawn_at\"):
				purple.spawn_at(global_position + Vector2(32, 0), shrink_amount)

		# Compute jump height based on charge
		var jump_height = lerp(MIN_JUMP_HEIGHT, MAX_JUMP_HEIGHT, charge_frac)

		# Floor jump
		if is_on_floor():
			jump_velocity = jump_height

		# Wall jump: vertical fixed by charge, horizontal away from current wall
		elif is_sticking:
			var wall_dir = -sign(get_wall_normal().x) if get_wall_normal().x != 0 else -1
			var horizontal_speed = (BASE_SPEED * 0.5 + charge_frac * BASE_SPEED) * WALL_JUMP_HORIZONTAL_MULT
			velocity.y = jump_height
			velocity.x = wall_dir * horizontal_speed

			# Prevent re-sticking to the same wall immediately
			last_wall_normal = get_wall_normal()
			is_sticking = false
			wall_jump_timer = WALL_JUMP_GRACE

		hold_time = 0.0
"

[sub_resource type="AtlasTexture" id="AtlasTexture_g2els"]
atlas = ExtResource("1_3vyb7")
region = Rect2(35, 256, 164, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_qhqgy"]
atlas = ExtResource("1_3vyb7")
region = Rect2(199, 256, 164, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_dqkch"]
atlas = ExtResource("1_3vyb7")
region = Rect2(363, 256, 164, 128)

[sub_resource type="SpriteFrames" id="SpriteFrames_g2els"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_g2els")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qhqgy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dqkch")
}],
"loop": true,
"name": &"default",
"speed": 3.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_3vyb7"]
size = Vector2(84, 56)

[node name="Player" type="CharacterBody2D"]
script = SubResource("GDScript_3vyb7")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(1, 0)
sprite_frames = SubResource("SpriteFrames_g2els")
autoplay = "default"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(1, 1)
shape = SubResource("RectangleShape2D_3vyb7")
